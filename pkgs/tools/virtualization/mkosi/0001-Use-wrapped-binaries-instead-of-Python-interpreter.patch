diff --git a/mkosi/__init__.py b/mkosi/__init__.py
index 89079b7a..e3d7faaa 100644
--- a/mkosi/__init__.py
+++ b/mkosi/__init__.py
@@ -633,7 +633,7 @@ def script_maybe_chroot_sandbox(

     helpers = {
         "mkosi-chroot": [
-            finalize_interpreter(bool(context.config.tools_tree)), "-SI", "/sandbox.py",
+            @MKOSI_SANDBOX@,
             "--bind", "/buildroot", "/",
             "--bind", "/var/tmp", "/var/tmp",
             *apivfs_options(root=Path("/")),
@@ -1474,7 +1474,7 @@ def run_ukify(
     options: Sequence[PathString] = (),
     sign: bool = True,
 ) -> None:
-    ukify = context.config.find_binary("ukify", "/usr/lib/systemd/ukify")
+    ukify = context.config.find_binary("ukify", "@UKIFY@")
     if not ukify:
         die("Could not find ukify")

@@ -1486,7 +1486,6 @@ def run_ukify(
     (context.workspace / "cmdline").write_text(f"{' '.join(cmdline)}\x00")

     cmd = [
-        python_binary(context.config),
         ukify,
         "build",
         *arguments,
@@ -1578,7 +1577,7 @@ def build_uki(
     profiles: Sequence[Path],
     output: Path,
 ) -> None:
-    if not (ukify := context.config.find_binary("ukify", "/usr/lib/systemd/ukify")):
+    if not (ukify := context.config.find_binary("ukify", "@UKIFY@")):
         die("Could not find ukify")

     arguments: list[PathString] = [
@@ -1648,7 +1647,6 @@ def build_uki(
         # new .ucode section support?
         if (
             systemd_tool_version(
-                python_binary(context.config),
                 ukify,
                 sandbox=context.sandbox,
             )
@@ -1708,7 +1706,7 @@ def want_uki(context: Context) -> bool:
         or (
             context.config.unified_kernel_images == ConfigFeature.auto
             and systemd_stub_binary(context).exists()
-            and context.config.find_binary("ukify", "/usr/lib/systemd/ukify") is not None
+            and context.config.find_binary("ukify", "@UKIFY@") is not None
         )
     )

@@ -2548,9 +2546,9 @@ def check_ukify(
     reason: str,
     hint: Optional[str] = None,
 ) -> None:
-    ukify = check_tool(config, "ukify", "/usr/lib/systemd/ukify", reason=reason, hint=hint)
+    ukify = check_tool(config, "ukify", "@UKIFY@", reason=reason, hint=hint)

-    v = systemd_tool_version(python_binary(config), ukify, sandbox=config.sandbox)
+    v = systemd_tool_version(ukify, sandbox=config.sandbox)
     if v < version:
         die(
             f"Found '{ukify}' with version {v} but version {version} or newer is required to {reason}.",
diff --git a/mkosi/bootloader.py b/mkosi/bootloader.py
index 163837ca..68939e08 100644
--- a/mkosi/bootloader.py
+++ b/mkosi/bootloader.py
@@ -262,10 +262,7 @@ def find_signed_grub_image(context: Context) -> Optional[Path]:


 def python_binary(config: Config) -> PathString:
-    # If there's no tools tree, prefer the interpreter from MKOSI_INTERPRETER. If there is a tools
-    # tree, just use the default python3 interpreter.
-    exe = Path(sys.executable)
-    return "python3" if config.tools_tree or not exe.is_relative_to("/usr") else exe
+    return "@PYTHON_PEFILE@"


 def extract_pe_section(context: Context, binary: Path, section: str, output: Path) -> Path:
diff --git a/mkosi/installer/__init__.py b/mkosi/installer/__init__.py
index 5f78a07e..a7d5f06f 100644
--- a/mkosi/installer/__init__.py
+++ b/mkosi/installer/__init__.py
@@ -117,7 +117,7 @@ class PackageManager:
     @classmethod
     def apivfs_script_cmd(cls, context: Context) -> list[PathString]:
         return [
-            finalize_interpreter(bool(context.config.tools_tree)), "-SI", "/sandbox.py",
+            @MKOSI_SANDBOX@,
             "--bind", "/", "/",
             "--same-dir",
             "--bind", "/var/tmp", "/buildroot/var/tmp",
diff --git a/mkosi/run.py b/mkosi/run.py
index 34d8d468..c5d67afb 100644
--- a/mkosi/run.py
+++ b/mkosi/run.py
@@ -534,7 +534,7 @@ def sandbox_cmd(
     cmdline: list[PathString] = [
         *setup,
         *(["strace", "--detach-on=execve"] if ARG_DEBUG_SANDBOX.get() else []),
-        sys.executable, "-SI", mkosi.sandbox.__file__,
+        @MKOSI_SANDBOX@,
         "--proc", "/proc",
         # We mounted a subdirectory of TMPDIR to /var/tmp so we unset TMPDIR so that /tmp or /var/tmp are
         # used instead.
@@ -720,7 +720,7 @@ def chroot_cmd(
     options: Sequence[PathString] = (),
 ) -> Iterator[list[PathString]]:
     cmdline: list[PathString] = [
-        sys.executable, "-SI", mkosi.sandbox.__file__,
+        @MKOSI_SANDBOX@,
         "--bind", root, "/",
         # We mounted a subdirectory of TMPDIR to /var/tmp so we unset TMPDIR so that /tmp or /var/tmp are
         # used instead.
